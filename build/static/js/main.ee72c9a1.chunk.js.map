{"version":3,"sources":["App.js","index.js"],"names":["App","state","rows","columns","moves","playerTurn","resetBoard","setState","winner","getPiece","x","y","filter","item","returnWinningMoves","xPosition","yPosition","xLocation","yLocation","winningMoves","player","i","checkX","checkY","checkPiece","push","n","checkForWin","locations","dex","length","element","addMove","nextPlayerTurn","availableYPosition","position","concat","this","rowViews","row","columnViews","column","piece","onClick","style","width","height","backgroundColor","display","padding","cursor","borderRadius","flex","border","undefined","flexDirection","left","right","bottom","top","zIndex","justifyContent","alignItems","color","fontWeight","fontSize","props","Object","assign","styles","container","renderBoard","React","Component","contatainer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ee72c9a1.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nexport default class App extends React.Component {\n  state = {\n    rows: 6,\n    columns: 7,\n    moves: [],\n    playerTurn: 'red'\n  };\n\n  //Resets board and all player moves\n  resetBoard = () => {\n    this.setState({\n      moves: [], winner: null\n    });\n  }\n\n  //Returns location of a piece\n  getPiece = (x, y) => {\n    const list = this.state.moves.filter((item) => {\n      return item.x === x && item.y === y;\n    });\n    return list[0];\n  }\n\n  //Checks status of individual player pieces to determine if there is a win\n  returnWinningMoves = (xPosition, yPosition, xLocation, yLocation) => {\n    const winningMoves = [{x: xPosition, y: yPosition}];\n    const player = this.getPiece(xPosition, yPosition).player;\n\n    for (let i = 1; i <= 3; i += 1) {\n      const checkX = xPosition + (xLocation * i);\n      const checkY = yPosition + (yLocation * i);\n\n      const checkPiece = this.getPiece(checkX, checkY);\n      if (checkPiece && checkPiece.player === player) {\n        winningMoves.push({x: checkX, y: checkY})\n      } else {\n        break;\n      }\n    }\n    \n    for (let n = -1; n >= -3; n -= 1) {\n      const checkX = xPosition + (xLocation * n);\n      const checkY = yPosition + (yLocation * n);\n\n      const checkPiece = this.getPiece(checkX, checkY);\n      if (checkPiece && checkPiece.player === player) {\n        winningMoves.push({x: checkX, y: checkY})\n      } else {\n        break;\n      }\n    }\n    return winningMoves;\n  }\n\n  //Checks board to see if either player has won and if so returns the winner\n  checkForWin = (x, y) => {\n    const locations = [{x: 1, y: 0}, {x: 0, y: 1}]\n    for (let dex = 0; dex < locations.length; dex++) {\n      const element = locations[dex];\n      const winningMoves = this.returnWinningMoves(x, y, element.x, element.y);\n      if (winningMoves.length > 3) {\n        this.setState({winner: this.getPiece(x, y).player, winningMoves});\n      }\n    }\n  }\n\n  //When player clicks on board adds their move to the board and switches the players turns and checks if the piece played was a winning piece\n  addMove = (x, y) => {\n    const {playerTurn} = this.state;\n    const nextPlayerTurn = playerTurn === 'red' ? 'yellow' : 'red';\n    let availableYPosition = null;\n    for (let position = this.state.rows - 1; position >= 0; position--) {\n      if (!this.getPiece(x, position)) {\n        availableYPosition = position;\n        break;\n      }\n    }\n    if (availableYPosition !== null) {\n     this.setState({moves: this.state.moves.concat({x, y: availableYPosition, player: playerTurn}), playerTurn: nextPlayerTurn},\n      () => this.checkForWin(x, availableYPosition, playerTurn))\n    }\n  }\n\n  //Initiliazes the board set up from the start\n  renderBoard() {\n    const {rows, columns, winner} = this.state;\n    const rowViews = [];\n  \n    for (let row = 0; row < this.state.rows; row += 1) {\n      const columnViews = [];\n      for (let column = 0; column < this.state.columns; column += 1) {\n        const piece = this.getPiece(column, row);\n        columnViews.push(\n          <div onClick = {() => {this.addMove(column, row)}} style = {{width: '100px', height: '100px', backgroundColor: '00a8ff', display: 'flex', padding: 1, cursor: 'pointer'}}>\n            <div style = {{borderRadius: '0%', backgroundColor: 'white', flex: 1, display: 'flex'}}>\n              {piece ? <div style = {{backgroundColor: piece.player, flex: 1, borderRadius: '0%', border: '1px solid #333'}}/> : undefined}\n          </div>\n        </div>\n        );\n      }\n      rowViews.push(\n        <div style = {{ display: 'flex', flexDirection: 'row'}}>{columnViews}</div>\n      );\n    }\n    \n    return (\n      <div style={{backgroundColor: 'black', display: 'flex', flexDirection:'column'}}>\n      {winner && <div onClick={this.resetBoard} style={{ position: 'absolute', left:0, right: 0, bottom: 0, top: 0, zIndex: 3, backgroundColor: 'rgba(0, 0, 0, .5)' , display: 'flex', \n      justifyContent: 'center', alignItems:'center', color: '#fff', fontWeight: '200', fontSize: '100px' }}>{winner + ' wins!'}</div> }\n      {rowViews}\n      </div>\n    );\n  }\n  \n  //Overhead function that uses renderBoard() to render the game board\n  render() {\n    const {style}=this.props;\n    return (\n        <div style={style?Object.assign({},styles.container,style): styles.container}>\n        <div>\n            {this.renderBoard()}\n            <button onClick = {this.resetBoard}>Clear Board</button>\n        </div>\n        </div>\n    ); \n}\n}\n\nconst styles = {\n    contatainer: {\n    height: '100%',\n    padding: 5,\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}