{"ast":null,"code":"var _jsxFileName = \"/Users/adrian/Documents/GitHub/lab2-adriangramatke/connect4/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class App extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      rows: 6,\n      columns: 7,\n      moves: [],\n      playerTurn: 'red'\n    };\n\n    this.resetBoard = () => {\n      this.setState({\n        moves: [],\n        winner: null\n      });\n    };\n\n    this.getPiece = (x, y) => {\n      const list = this.state.moves.filter(item => {\n        return item.x === x && item.y === y;\n      });\n      return list[0];\n    };\n\n    this.returnWinningMoves = (xPosition, yPosition, xLocation, yLocation) => {\n      const winningMoves = [{\n        x: xPosition,\n        y: yPosition\n      }];\n      const player = this.getPiece(xPosition, yPosition).player;\n\n      for (let i = 1; i <= 3; i += 1) {\n        const checkX = xPosition + xLocation * i;\n        const checkY = yPosition + yLocation * i;\n        const checkPiece = this.getPiece(checkX, checkY);\n\n        if (checkPiece && checkPiece.player === player) {\n          winningMoves.push({\n            x: checkX,\n            y: checkY\n          });\n        } else {\n          break;\n        }\n      }\n\n      for (let n = -1; n >= -3; n -= 1) {\n        const checkX = xPosition + xLocation * n;\n        const checkY = yPosition + yLocation * n;\n        const checkPiece = this.getPiece(checkX, checkY);\n\n        if (checkPiece && checkPiece.player === player) {\n          winningMoves.push({\n            x: checkX,\n            y: checkY\n          });\n        } else {\n          break;\n        }\n      }\n\n      return winningMoves;\n    };\n\n    this.checkForWin = (x, y) => {\n      const locations = [{\n        x: 1,\n        y: 0\n      }, {\n        x: 0,\n        y: 1\n      }];\n\n      for (let dex = 0; dex < locations.length; dex++) {\n        const element = locations[dex];\n        const winningMoves = this.returnWinningMoves(x, y, element.x, element.y);\n\n        if (winningMoves.length > 3) {\n          this.setState({\n            winner: this.getPiece(x, y).player,\n            winningMoves\n          });\n        }\n      }\n    };\n\n    this.addMove = (x, y) => {\n      const {\n        playerTurn\n      } = this.state;\n      const nextPlayerTurn = playerTurn === 'red' ? 'yellow' : 'red';\n      let availableYPosition = null;\n\n      for (let position = this.state.rows - 1; position >= 0; position--) {\n        if (!this.getPiece(x, position)) {\n          availableYPosition = position;\n          break;\n        } else {\n          break;\n        }\n      }\n\n      if (availableYPosition !== null) {\n        this.setState({\n          moves: this.state.moves.concat({\n            x,\n            y: availableYPosition,\n            player: playerTurn\n          }),\n          playerTurn: nextPlayerTurn\n        }, () => this.checkForWin(x, availableYPosition, playerTurn));\n      }\n    };\n  }\n\n  renderGameOver() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        backgroundColor: 'black',\n        display: 'flex',\n        flexDirection: 'column'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: this.resetBoard,\n        style: {\n          position: 'absolute',\n          left: 0,\n          right: 0,\n          bottom: 0,\n          top: 0,\n          zIndex: 3,\n          backgroundColor: 'rgba(0, 0, 0, .5)',\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          color: '#fff',\n          fontWeight: '200',\n          fontSize: '100px'\n        },\n        children: 'game over!'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 8\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this);\n  } //Initiliazes the board set up from the start\n\n\n  renderBoard() {\n    const {\n      rows,\n      columns,\n      winner\n    } = this.state;\n    const rowViews = [];\n\n    for (let row = 0; row < this.state.rows; row += 1) {\n      const columnViews = [];\n\n      for (let column = 0; column < this.state.columns; column += 1) {\n        const piece = this.getPiece(column, row);\n        columnViews.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: () => {\n            this.addMove(column, row);\n          },\n          style: {\n            width: '100px',\n            height: '100px',\n            backgroundColor: '00a8ff',\n            display: 'flex',\n            padding: 1,\n            cursor: 'pointer'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              borderRadius: '0%',\n              backgroundColor: 'white',\n              flex: 1,\n              display: 'flex'\n            },\n            children: piece ? /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                backgroundColor: piece.player,\n                flex: 1,\n                borderRadius: '0%',\n                border: '1px solid #333'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 24\n            }, this) : undefined\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this));\n      }\n\n      rowViews.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          flexDirection: 'row'\n        },\n        children: columnViews\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this));\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        backgroundColor: 'black',\n        display: 'flex',\n        flexDirection: 'column'\n      },\n      children: [winner && /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: this.resetBoard,\n        style: {\n          position: 'absolute',\n          left: 0,\n          right: 0,\n          bottom: 0,\n          top: 0,\n          zIndex: 3,\n          backgroundColor: 'rgba(0, 0, 0, .5)',\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          color: '#fff',\n          fontWeight: '200',\n          fontSize: '100px'\n        },\n        children: winner + ' wins!'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 18\n      }, this), rowViews]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this);\n  } //Overhead fucntion that uses renderBoard() to render the game board\n\n\n  render() {\n    const {\n      style\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: style ? Object.assign({}, styles.container, style) : styles.container,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [this.renderBoard(), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.resetBoard,\n          children: \"Clear Board\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }, this);\n  }\n\n}\nconst styles = {\n  contatainer: {\n    height: '100%',\n    padding: 5,\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n};","map":{"version":3,"sources":["/Users/adrian/Documents/GitHub/lab2-adriangramatke/connect4/src/App.js"],"names":["React","Component","App","state","rows","columns","moves","playerTurn","resetBoard","setState","winner","getPiece","x","y","list","filter","item","returnWinningMoves","xPosition","yPosition","xLocation","yLocation","winningMoves","player","i","checkX","checkY","checkPiece","push","n","checkForWin","locations","dex","length","element","addMove","nextPlayerTurn","availableYPosition","position","concat","renderGameOver","backgroundColor","display","flexDirection","left","right","bottom","top","zIndex","justifyContent","alignItems","color","fontWeight","fontSize","renderBoard","rowViews","row","columnViews","column","piece","width","height","padding","cursor","borderRadius","flex","border","undefined","render","style","props","Object","assign","styles","container","contatainer"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nexport default class App extends React.Component {\n  state = {\n    rows: 6,\n    columns: 7,\n    moves: [],\n    playerTurn: 'red'\n  };\n\n  //Resets board and all player moves\n  resetBoard = () => {\n    this.setState({\n      moves: [], winner: null\n    });\n  }\n\n  //Returns location of a piece\n  getPiece = (x, y) => {\n    const list = this.state.moves.filter((item) => {\n      return item.x === x && item.y === y;\n    });\n    return list[0];\n  }\n\n  //Checks status of individual player pieces to determine if there is a win\n  returnWinningMoves = (xPosition, yPosition, xLocation, yLocation) => {\n    const winningMoves = [{x: xPosition, y: yPosition}];\n    const player = this.getPiece(xPosition, yPosition).player;\n\n    for (let i = 1; i <= 3; i += 1) {\n      const checkX = xPosition + (xLocation * i);\n      const checkY = yPosition + (yLocation * i);\n\n      const checkPiece = this.getPiece(checkX, checkY);\n      if (checkPiece && checkPiece.player === player) {\n        winningMoves.push({x: checkX, y: checkY})\n      } else {\n        break;\n      }\n    }\n    \n    for (let n = -1; n >= -3; n -= 1) {\n      const checkX = xPosition + (xLocation * n);\n      const checkY = yPosition + (yLocation * n);\n\n      const checkPiece = this.getPiece(checkX, checkY);\n      if (checkPiece && checkPiece.player === player) {\n        winningMoves.push({x: checkX, y: checkY})\n      } else {\n        break;\n      }\n    }\n    return winningMoves;\n  }\n\n  //Checks board to see if either player has won and if so returns the winner\n  checkForWin = (x, y) => {\n    const locations = [{x: 1, y: 0}, {x: 0, y: 1}]\n    for (let dex = 0; dex < locations.length; dex++) {\n      const element = locations[dex];\n      const winningMoves = this.returnWinningMoves(x, y, element.x, element.y);\n      if (winningMoves.length > 3) {\n        this.setState({winner: this.getPiece(x, y).player, winningMoves});\n      }\n    }\n  }\n\n  //When player clicks on board adds their move to the board and switches the players turns and checks if the piece played was a winning piece\n  addMove = (x, y) => {\n    const {playerTurn} = this.state;\n    const nextPlayerTurn = playerTurn === 'red' ? 'yellow' : 'red';\n    let availableYPosition = null;\n    for (let position = this.state.rows - 1; position >= 0; position--) {\n      if (!this.getPiece(x, position)) {\n        availableYPosition = position;\n        break;\n      } else {\n        break;\n      }\n    }\n    if (availableYPosition !== null) {\n     this.setState({moves: this.state.moves.concat({x, y: availableYPosition, player: playerTurn}), playerTurn: nextPlayerTurn},\n      () => this.checkForWin(x, availableYPosition, playerTurn))\n    }\n  }\n\n  renderGameOver() {\n    return (\n      <div style={{backgroundColor: 'black', display: 'flex', flexDirection:'column'}}>\n      {<div onClick={this.resetBoard} style={{ position: 'absolute', left:0, right: 0, bottom: 0, top: 0, zIndex: 3, backgroundColor: 'rgba(0, 0, 0, .5)' , display: 'flex', \n      justifyContent: 'center', alignItems:'center', color: '#fff', fontWeight: '200', fontSize: '100px' }}>{'game over!'}</div> }\n      </div>\n    );\n  }\n  \n  //Initiliazes the board set up from the start\n  renderBoard() {\n    const {rows, columns, winner} = this.state;\n    const rowViews = [];\n  \n    for (let row = 0; row < this.state.rows; row += 1) {\n      const columnViews = [];\n      for (let column = 0; column < this.state.columns; column += 1) {\n        const piece = this.getPiece(column, row);\n        columnViews.push(\n          <div onClick = {() => {this.addMove(column, row)}} style = {{width: '100px', height: '100px', backgroundColor: '00a8ff', display: 'flex', padding: 1, cursor: 'pointer'}}>\n            <div style = {{borderRadius: '0%', backgroundColor: 'white', flex: 1, display: 'flex'}}>\n              {piece ? <div style = {{backgroundColor: piece.player, flex: 1, borderRadius: '0%', border: '1px solid #333'}}/> : undefined}\n          </div>\n        </div>\n        );\n      }\n      rowViews.push(\n        <div style = {{ display: 'flex', flexDirection: 'row'}}>{columnViews}</div>\n      );\n    }\n    return (\n      <div style={{backgroundColor: 'black', display: 'flex', flexDirection:'column'}}>\n      {winner && <div onClick={this.resetBoard} style={{ position: 'absolute', left:0, right: 0, bottom: 0, top: 0, zIndex: 3, backgroundColor: 'rgba(0, 0, 0, .5)' , display: 'flex', \n      justifyContent: 'center', alignItems:'center', color: '#fff', fontWeight: '200', fontSize: '100px' }}>{winner + ' wins!'}</div> }\n      {rowViews}\n      </div>\n    );\n  }\n  \n  //Overhead fucntion that uses renderBoard() to render the game board\n  render() {\n    const {style}=this.props;\n    return (\n        <div style={style?Object.assign({},styles.container,style): styles.container}>\n        <div>\n            {this.renderBoard()}\n            <button onClick = {this.resetBoard}>Clear Board</button>\n        </div>\n        </div>\n    ); \n}\n}\n\nconst styles = {\n    contatainer: {\n    height: '100%',\n    padding: 5,\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n};\n"]},"metadata":{},"sourceType":"module"}